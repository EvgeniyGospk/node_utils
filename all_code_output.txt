--- File: dirtree.js ---

#!/usr/bin/env node

import fs from "fs/promises";
import path from "path";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";

// --- Настройка и парсинг аргументов командной строки ---
const argv = yargs(hideBin(process.argv))
  .usage("Usage: $0 [options]")
  .option("output", {
    alias: "o",
    type: "string",
    description: "Имя файла для вывода дерева каталогов",
    default: "directory_tree.txt",
  })
  .option("dir", {
    alias: "d",
    type: "string",
    description: "Корневая директория для построения дерева",
    default: ".", // Текущая директория по умолчанию
  })
  .option("exclude-dirs", {
    alias: "ed",
    type: "array",
    description:
      "Имена директорий для исключения (можно указать несколько раз)",
    default: ["node_modules", ".git"], // Стандартные исключения
  })
  .option("max-depth", {
    alias: "md",
    type: "number",
    description: "Максимальная глубина сканирования (0 - только корень)",
    // default: Infinity // Можно сделать без ограничения по умолчанию
  })
  .help()
  .alias("help", "h")
  .alias("version", "v")
  .epilog("Генерирует текстовое представление дерева каталогов.")
  .parseSync();

// --- Параметры ---
const ROOT_DIRECTORY = path.resolve(argv.dir);
const OUTPUT_FILENAME = argv.output;
const OUTPUT_FILEPATH = path.resolve(process.cwd(), OUTPUT_FILENAME);
const EXCLUDE_DIRS_SET = new Set(argv.excludeDirs); // Используем Set для быстрого поиска
const MAX_DEPTH = argv.maxDepth ?? Infinity; // Если не указано, глубина не ограничена

// Символы для отрисовки дерева
const TEE = "├── ";
const ELBOW = "└── ";
const PIPE = "│   ";
const SPACE = "    ";

// --- Основная рекурсивная функция для построения дерева ---
async function generateTree(directory, currentDepth, prefix = "") {
  if (currentDepth > MAX_DEPTH) {
    return ""; // Прекращаем рекурсию, если достигли максимальной глубины
  }

  let treeString = "";
  let entries;

  try {
    // Читаем содержимое директории, получая типы (файл/директория)
    entries = await fs.readdir(directory, { withFileTypes: true });
  } catch (error) {
    if (error.code === "EACCES") {
      return `${prefix}${ELBOW} [Нет доступа] ${path.basename(directory)}\n`;
    } else {
      console.error(
        `\n❌ Ошибка чтения директории ${directory}: ${error.message}`
      );
      return `${prefix}${ELBOW} [Ошибка чтения] ${path.basename(directory)}\n`;
    }
  }

  // Фильтруем исключенные директории и сам выходной файл (если он в этой папке)
  const filteredEntries = entries.filter(
    (entry) =>
      !EXCLUDE_DIRS_SET.has(entry.name) &&
      path.join(directory, entry.name) !== OUTPUT_FILEPATH // Не показываем сам выходной файл
  );

  // Сортируем: сначала директории, потом файлы (алфавитно внутри групп)
  filteredEntries.sort((a, b) => {
    if (a.isDirectory() && !b.isDirectory()) return -1;
    if (!a.isDirectory() && b.isDirectory()) return 1;
    return a.name.localeCompare(b.name);
  });

  const count = filteredEntries.length;
  for (let i = 0; i < count; i++) {
    const entry = filteredEntries[i];
    const isLast = i === count - 1; // Последний ли элемент в списке?

    const connector = isLast ? ELBOW : TEE;
    const entryPath = path.join(directory, entry.name);

    treeString += `${prefix}${connector}${entry.name}\n`;

    if (entry.isDirectory()) {
      // Определяем префикс для следующего уровня
      const nextPrefix = prefix + (isLast ? SPACE : PIPE);
      // Рекурсивно вызываем для поддиректории
      treeString += await generateTree(entryPath, currentDepth + 1, nextPrefix);
    }
  }

  return treeString;
}

// --- Функция запуска ---
async function run() {
  console.log("--- Генерация дерева каталогов ---");
  console.log(`Корневая директория: ${ROOT_DIRECTORY}`);
  console.log(`Выходной файл: ${OUTPUT_FILEPATH}`);
  console.log(
    `Исключенные директории: ${argv.excludeDirs.join(", ") || "Нет"}`
  );
  if (MAX_DEPTH !== Infinity) {
    console.log(`Максимальная глубина: ${MAX_DEPTH}`);
  }
  console.log("---------------------------------\n");

  try {
    // Добавляем имя корневой директории в начало вывода
    const rootDirName = path.basename(ROOT_DIRECTORY) || ROOT_DIRECTORY; // На случай если указали '/' или '.'
    let finalTree = `${rootDirName}\n`;

    console.log("🌳 Построение дерева...");
    finalTree += await generateTree(ROOT_DIRECTORY, 0); // Начинаем с глубины 0

    console.log(`\n💾 Запись дерева в файл: ${OUTPUT_FILEPATH}`);
    await fs.writeFile(OUTPUT_FILEPATH, finalTree.trim() + "\n", "utf8");

    console.log(
      `\n✅ Успешно! Дерево каталогов сохранено в ${OUTPUT_FILENAME}`
    );
  } catch (error) {
    console.error("\n❌ Произошла ошибка при генерации дерева:", error);
    process.exit(1);
  }
}

// --- Запуск ---
run();

--- End of File: dirtree.js ---


--- File: package-lock.json ---

{
  "name": "code-scanner-cli",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "code-scanner-cli",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "ignore": "^7.0.3",
        "yargs": "^17.7.2"
      },
      "bin": {
        "codescan": "code-scanner.js"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/ignore": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.3.tgz",
      "integrity": "sha512-bAH5jbK/F3T3Jls4I0SO1hmPR0dKU0a7+SY6n1yzRtG54FLO8d6w/nxLFX2Nb7dBu6cCWXPaAME6cYqFUMmuCA==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    }
  }
}

--- End of File: package-lock.json ---


--- File: package.json ---

{
  "name": "admin228-cli-utils",
  "version": "1.1.0",
  "description": "Набор CLI-утилит: codescan (сканирование и объединение кода) и dirtree (генерация дерева каталогов).",
  "main": "codescan.js",
  "type": "module",
  "bin": {
    "codescan": "./codescan.js",
    "dirtree": "./dirtree.js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "cli",
    "util",
    "node",
    "code",
    "scan",
    "concatenate",
    "directory",
    "tree",
    "structure"
  ],
  "author": "admin228",
  "license": "ISC",
  "dependencies": {
    "ignore": "^5.3.1",
    "yargs": "^17.7.2"
  },
  "devDependencies": {}
}

--- End of File: package.json ---
