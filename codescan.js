#!/usr/bin/env node

import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import ignore from "ignore"; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

// --- –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É ---
const __filename = fileURLToPath(import.meta.url);
const SCRIPT_BASENAME = path.basename(__filename);

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
const argv = yargs(hideBin(process.argv))
  .usage("Usage: $0 [options]")
  .option("output", {
    alias: "o",
    type: "string",
    description: "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
    default: "all_code_output.txt",
  })
  .option("dir", {
    alias: "d",
    type: "string",
    description: "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    default: ".",
  })
  .option("only-files", {
    alias: "of",
    type: "array",
    description:
      "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)",
    default: [],
  })
  .option("include-exts", {
    alias: "ie",
    type: "array",
    description:
      "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω --only-files)",
    // --- Default extensions now include .tsx and .jsx ---
    default: [
      ".js",
      ".mjs",
      ".cjs",
      ".json",
      ".html",
      ".css",
      ".cs",
      ".tsx",
      ".jsx",
      ".ts",
    ],
    // --- End of modification ---
  })
  .option("exclude-files", {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç—É –æ–ø—Ü–∏—é
    alias: "ef",
    type: "array",
    description: "–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å glob)",
    default: ["package-lock.json"], // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –≤–∏–¥–µ—Ç—å, –ø–µ—Ä–µ–¥–∞–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ
  })
  .option("exclude-dirs", {
    alias: "ed",
    type: "array",
    description: "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å glob)",
    default: ["node_modules", ".git"], // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
  })
  // .option("use-gitignore", { ... }) // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª .gitignore —É–±—Ä–∞–Ω
  .help()
  .alias("help", "h")
  .alias("version", "v")
  .epilog("–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω.")
  .parseSync(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º sync –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤ CLI

// --- –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ---
console.log("--- [DEBUG] Parsed argv ---");
console.dir(argv, { depth: 3 }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º argv —Å –±–æ–ª—å—à–µ–π –≥–ª—É–±–∏–Ω–æ–π –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
console.log("--------------------------");
// --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –õ–û–ì–ê ---

// --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
const OUTPUT_FILENAME = argv.output;
const SCAN_DIRECTORY = path.resolve(argv.dir);
const INCLUDE_EXTENSIONS = argv.includeExts.map((ext) =>
  ext.startsWith(".") ? ext.toLowerCase() : `.${ext.toLowerCase()}`
);
const ONLY_FILES_LIST = argv.onlyFiles;
const IS_ONLY_FILES_MODE = ONLY_FILES_LIST.length > 0;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---
function createIgnoreMatcher(baseDir) {
  // –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
  let ig;
  try {
    ig = ignore(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ignore
  } catch (err) {
    console.error("--- [DEBUG] –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ignore() ---", err);
    // –ï—Å–ª–∏ —Å–∞–º –≤—ã–∑–æ–≤ ignore() –ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏–ª–∏ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É
    // —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–ª—å—à–µ
    return null;
  }

  console.log("--- [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ ignoreMatcher (–±–µ–∑ .gitignore) ---");

  // 1. –ë–∞–∑–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Å–∫—Ä–∏–ø—Ç, –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª)
  // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏ –æ—Ç baseDir, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
  const selfScriptRelativePath = path.relative(baseDir, __filename);
  if (selfScriptRelativePath && !selfScriptRelativePath.startsWith("..")) {
    ig.add(selfScriptRelativePath);
    console.log(
      `[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫—Ä–∏–ø—Ç): ${selfScriptRelativePath}`
    );
  } else {
    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const selfScriptPattern = `**/${SCRIPT_BASENAME}`;
    ig.add(selfScriptPattern);
    console.log(
      `[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫—Ä–∏–ø—Ç, fallback): ${selfScriptPattern}`
    );
  }

  const outputFilePath = path.resolve(process.cwd(), OUTPUT_FILENAME); // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã—Ö. —Ñ–∞–π–ª—É
  const outputRelativePath = path.relative(baseDir, outputFilePath);
  if (outputRelativePath && !outputRelativePath.startsWith("..")) {
    ig.add(outputRelativePath);
    console.log(
      `[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã—Ö. —Ñ–∞–π–ª): ${outputRelativePath}`
    );
  } else {
    const outputFilenamePattern = `**/${OUTPUT_FILENAME}`;
    ig.add(outputFilenamePattern);
    console.log(
      `[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã—Ö. —Ñ–∞–π–ª, fallback): ${outputFilenamePattern}`
    );
  }

  // --- –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò–ó –û–ü–¶–ò–ô ---
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ argv.excludeFiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  if (Array.isArray(argv.excludeFiles) && argv.excludeFiles.length > 0) {
    console.log("[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–∑ --exclude-files:");
    argv.excludeFiles.forEach((pattern) => {
      const rule = pattern.includes("/") ? pattern : `**/${pattern}`;
      ig.add(rule);
      console.log(`  -> ${rule}`);
    });
  } else {
    console.log("[DEBUG] –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ --exclude-files –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.");
  }

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ argv.excludeDirs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  if (Array.isArray(argv.excludeDirs) && argv.excludeDirs.length > 0) {
    console.log("[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–∑ --exclude-dirs:");
    argv.excludeDirs.forEach((pattern) => {
      const rule = pattern.endsWith("/") ? pattern : `${pattern}/`;
      const finalRule = pattern.includes("/") ? rule : `**/${rule}`;
      ig.add(finalRule);
      console.log(`  -> ${finalRule}`);
      // –î–æ–±–∞–≤–∏–º –∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è –±–µ–∑ **/, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ (–±–µ–∑ —Å–ª–µ—à–µ–π)
      if (!pattern.includes("/")) {
        ig.add(pattern);
        console.log(`  -> ${pattern} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)`);
      }
    });
  } else {
    console.log(
      "[DEBUG] –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ --exclude-dirs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)."
    );
    // –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, –∏—Ö –Ω–µ –±—É–¥–µ—Ç.
    // –î–æ–±–∞–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—é–¥–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–ø–∞—Å—Ç—å –∏–∑-–∑–∞ yargs
    console.log(
      "[DEBUG] –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è dirs –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:"
    );
    ["node_modules", ".git"].forEach((pattern) => {
      ig.add(`**/${pattern}/`);
      console.log(`  -> **/${pattern}/`);
      ig.add(pattern);
      console.log(`  -> ${pattern} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)`);
    });
  }

  // --- –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º ---
  console.log("--- [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ ignoreMatcher –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º ---");
  console.log(`[DEBUG] –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ ig: ${typeof ig}`);
  console.log(
    `[DEBUG] –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ ig.ignores: ${typeof ig?.ignores === "function"}`
  );
  console.log("-------------------------------------------");
  // --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –õ–û–ì–ê ---

  return ig; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
async function getAllCodeInDirectory(
  directory,
  baseScanDirectory,
  ignoreMatcher, // <-- –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–µ—Ä
  includeExts,
  isOnlyFilesMode,
  onlyFilesList
) {
  const relativeDirPath = path.relative(baseScanDirectory, directory) || ".";
  console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${relativeDirPath}`);

  // --- –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ ignoreMatcher ---
  console.log(
    `--- [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ ignoreMatcher –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ getAllCodeInDirectory (${relativeDirPath}) ---`
  );
  console.log(`[DEBUG] –¢–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ ignoreMatcher: ${typeof ignoreMatcher}`);
  // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ createIgnoreMatcher –ø—Ä–∏ –æ—à–∏–±–∫–µ
  const hasIgnoresMethod =
    ignoreMatcher && typeof ignoreMatcher.ignores === "function";
  console.log(
    `[DEBUG] –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ ignoreMatcher.ignores: ${hasIgnoresMethod}`
  );
  console.log("-------------------------------------------------------------");
  // --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –õ–û–ì–ê ---

  // –ï—Å–ª–∏ ignoreMatcher –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Å–ª–æ–º–∞–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –≤–µ—Ç–∫–∏
  if (!hasIgnoresMethod) {
    console.error(
      `‚ùå [FATAL] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ignoreMatcher –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${relativeDirPath}. –ü—Ä–µ—Ä—ã–≤–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –≤–µ—Ç–∫–∏.`
    );
    return { content: "", count: 0 }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  }

  let allContent = "";
  let processedFilesCount = 0;

  try {
    const entries = await fs.readdir(directory, { withFileTypes: true });

    for (const entry of entries) {
      const entryPath = path.join(directory, entry.name);
      // –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ë–ê–ó–û–í–û–ô –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ignore
      const relativePathForIgnore = path.relative(baseScanDirectory, entryPath);

      if (!relativePathForIgnore) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–µ–Ω—å (–ø—É—Å—Ç–æ–π –æ—Ç–Ω. –ø—É—Ç—å)

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ—à –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
      const pathToCheck = entry.isDirectory()
        ? `${relativePathForIgnore}/`
        : relativePathForIgnore;

      // --- –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –ø–µ—Ä–µ–¥ ignore ---
      // console.log(`  [DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç—å –¥–ª—è ignore: '${pathToCheck}'`); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)
      // --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –õ–û–ì–ê ---

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
      if (ignoreMatcher.ignores(pathToCheck)) {
        const type = entry.isDirectory() ? "–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é" : "—Ñ–∞–π–ª";
        console.log(
          `   -> –ò–≥–Ω–æ—Ä–∏—Ä—É—é ${type} (–ø—Ä–∞–≤–∏–ª–æ): ${relativePathForIgnore}`
        );
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
      }

      // –ï—Å–ª–∏ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è:
      if (entry.isDirectory()) {
        // console.log(`   -> –í—Ö–æ–∂—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${relativePathForIgnore}`); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        const { content: subContent, count: subCount } =
          await getAllCodeInDirectory(
            entryPath,
            baseScanDirectory,
            ignoreMatcher, // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
            includeExts,
            isOnlyFilesMode,
            onlyFilesList
          );
        allContent += subContent;
        processedFilesCount += subCount;
      } else if (entry.isFile()) {
        const relativeFilePath = relativePathForIgnore;
        let shouldInclude = false;

        // –õ–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if (isOnlyFilesMode) {
          if (onlyFilesList.includes(entry.name)) {
            shouldInclude = true;
          }
        } else {
          const ext = path.extname(entry.name).toLowerCase();
          if (includeExts.includes(ext)) {
            shouldInclude = true;
          } else {
            // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ª–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å –≤—ã–≤–æ–¥
            // console.log(`   -> –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${ext}): ${relativeFilePath}`);
          }
        }

        if (shouldInclude) {
          try {
            console.log(`   -> –ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${relativeFilePath}`);
            const fileContent = await fs.readFile(entryPath, "utf8");
            allContent += `--- File: ${relativeFilePath} ---\n\n`;
            allContent += fileContent.trim();
            allContent += `\n\n--- End of File: ${relativeFilePath} ---\n\n\n`;
            processedFilesCount++;
          } catch (readError) {
            console.error(
              `   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${relativeFilePath}:`,
              readError.message
            );
          }
        }
      }
    }
  } catch (dirError) {
    if (dirError.code === "EACCES") {
      console.warn(
        `   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${relativeDirPath}, –ø—Ä–æ–ø—É—Å–∫–∞—é.`
      );
    } else {
      // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${relativeDirPath}:`,
        dirError.message // –ù–µ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      );
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–µ—Ç–∫–∏
    }
  }

  return { content: allContent, count: processedFilesCount };
}

// --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async function run() {
  console.log("--- –ó–∞–ø—É—Å–∫ code-scanner ---");
  console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${SCAN_DIRECTORY}`);
  console.log(`–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${OUTPUT_FILENAME}`);
  if (IS_ONLY_FILES_MODE) {
    console.log(`–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã [${ONLY_FILES_LIST.join(", ")}]`);
  } else {
    console.log(`–í–∫–ª—é—á–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${INCLUDE_EXTENSIONS.join(", ")}`); // –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∂–µ—Ç .tsx –∏ .jsx
  }
  // –õ–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  console.log(`–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (–ø–µ—Ä–µ–¥–∞–Ω–æ): ${argv.ef?.join(", ") || "–ù–µ—Ç"}`); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è 'ef'
  console.log(
    `–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–µ—Ä–µ–¥–∞–Ω–æ): ${argv.ed?.join(", ") || "–ù–µ—Ç"}`
  ); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è 'ed'
  console.log("---------------------------\n");

  let ignoreMatcher; // –û–±—ä—è–≤–∏–º –∑–¥–µ—Å—å
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –°–ò–ù–•–†–û–ù–ù–û
    ignoreMatcher = createIgnoreMatcher(SCAN_DIRECTORY);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    if (!ignoreMatcher || typeof ignoreMatcher.ignores !== "function") {
      console.error(
        "‚ùå [FATAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ignoreMatcher. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ."
      );
      process.exit(1); // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ –º–∞—Ç—á–µ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞
    }

    const { content, count } = await getAllCodeInDirectory(
      SCAN_DIRECTORY,
      SCAN_DIRECTORY, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      ignoreMatcher, // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç—á–µ—Ä
      INCLUDE_EXTENSIONS,
      IS_ONLY_FILES_MODE,
      ONLY_FILES_LIST
    );

    if (count === 0 && content.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
      console.log(
        "\n‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."
      );
      // –ù–µ –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—Ç–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç
      return;
    } else if (count === 0 && content.length > 0) {
      console.log(
        "\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤, –Ω–æ –±—ã–ª —Å–æ–±—Ä–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥."
      );
    }

    const outputFilePath = path.resolve(process.cwd(), OUTPUT_FILENAME);
    console.log(`\nüíæ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª: ${outputFilePath}`);

    await fs.writeFile(outputFilePath, content.trim() + "\n"); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ

    console.log(
      `\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ${count} —Ñ–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ ${OUTPUT_FILENAME}`
    );
  } catch (error) {
    // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ run (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞)
    // –∏–ª–∏ –µ—Å–ª–∏ getAllCodeInDirectory –≤—Å–µ –∂–µ –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É (—Ö–æ—Ç—è –æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å)
    console.error("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:", error);
    // console.error(error.stack); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞
    process.exit(1); // –í—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
  }
}

// --- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
run();
